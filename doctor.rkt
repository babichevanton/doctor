#lang scheme/base
(define (visit-doctor name)
  (define (doctor-driver-loop name responses)
    (define (reply user-response)
      (define (change-person phrase)
           (many-replace '(
                          (are-change am)
                          (your-change my)
                          (yourself-change myself)
                          (you-change i)
                          (me you)
                          (am are) 
                          (my your)
                          (myself yourself)
                          (i you)
                          (are are-change)
                          (your your-change)
                          (yourself yourself-change)
                          (you you-change)
                          ) phrase))

      (define (qualifier)
        (pick-random '((you seem to think)
                       (you feel that)
                       (why do you believe)
                       (why do you say)
                       (what makes you think that)
                       )))

      (define (reference)
        (pick-random '((earlier you said that)
                       )))

      (define (hedge)
        (pick-random '((please go on)
                       (please tell me more about this)
                       (many people have the same sorts of feelings)
                       (many of my patients have told me the same thing)
                       (please continue)
                       )))
      
      (case (choose (random) 1 '(1/3 3/4 1))
            ((1) (hedge))
            ((2) (append (qualifier) (change-person user-response)))
            (else (append (reference) (change-person (pick-random responses))))))

    (newline)
    (print '**)
    (let ((user-response (myread '())))
      (cond ((equal? user-response '(goodbye))
             (printf "Goodbye, ~a!\n" name)
             (print '(see you next week)))
            (else (print (reply user-response))
                  (doctor-driver-loop name (cons user-response responses))))))

  (printf "Hello, ~a!\n" name)
  (print '(what seems to be the trouble?))
  (doctor-driver-loop name '()))

(define (choose rand numof weights)
  (cond ((< rand (car weights)) numof)
        (else (choose rand (+ numof 1) (cdr weights)))))

(define (replace pattern replacement lst)
  (cond ((null? lst) '())
        ((equal? (car lst) pattern)
         (cons replacement
               (replace pattern replacement (cdr lst))))
        (else
         (cons (car lst)
               (replace pattern replacement (cdr lst))))))

(define (pick-random lst)
  (list-ref lst (random (length lst))))

(define (many-replace replacement-pairs lst)
        (cond ((null? replacement-pairs) lst)
              (else (let ((pat-rep (car replacement-pairs)))
                      (replace (car pat-rep)
                               (cadr pat-rep)
                               (many-replace (cdr replacement-pairs) lst))))))

(define (myread input) 
  (let ((token (read)))
    (cond ((eof-object? token)
             (newline)
             (reverse input))
           (else
             (myread (cons token input))))))